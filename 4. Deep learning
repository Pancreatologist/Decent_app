rm(list=ls())
library(ggsci)
library(here)
library(AppliedPredictiveModeling)
library(tidymodels)
library(ROSE)
library(smotefamily)
library(themis)
library(recipes)
library(torch)
library(cito)
library(brulee)
library(recipes)
library(yardstick)
library(torch)
library(EcoData)
library(Metrics)
library(EcoData)
library(tensorflow)
options(torch_device = "gpu")
#读取boruta跟LASSO的交集筛选出的测试集数据
data_test <- read.delim("boruta跟LASSO的交集_测试集.txt",
                   sep = '\t', row.names=1,header = TRUE, check.names = FALSE)

#读取boruta跟LASSO的交集
data_train <- read.delim("boruta跟LASSO的交集_训练集.txt",
                         sep = '\t', row.names=1,header = TRUE, check.names = FALSE)
data_train$diagnosis <- as.factor(data_train$diagnosis)
data_train$diagnosis <- factor(data_train$diagnosis)
data_train$diagnosis <- ifelse(data_train$diagnosis == "1" 
                               | data_train$diagnosis == 1, 1, 0)

data_test$diagnosis <- ifelse(data_test$diagnosis == "1" 
                               | data_test$diagnosis == 1, 1, 0)

set.seed(42)
nn.fit  = dnn(diagnosis~., data = data_train,
              lr =0.001, 
              validation = 0.1,
              batchsize =1,
              #lambda = 0.1,
              #bootstrap = 30L,
              loss = "binomial",
              early_stopping=20L,
              #early_stopping=60L,
              hidden = c(30L,30L),
              optimizer ="adam",
              dropout = 0.1,
              #lambda = 0.0005, alpha = 0.03,
              activation = "relu",
              verbose = FALSE) #针对12个变量的训练集20250423


analyze_training(nn.fit)
#results = summary(nn.fit)
plot(nn.fit)
ALE_plot <- ALE(nn.fit)
summary(nn.fit)
#### Predictions  
prob_dnn = predict(nn.fit, newdata = data_test, 
                  type = 'response')        
pred_dnn <- ifelse(prob_dnn > 0.5, 1, 0)   
#  DNN 创建混淆矩阵  
data_test$diagnosis <- as.factor(data_test$diagnosis)

confusion_matrix_dnn <- caret::confusionMatrix(
  factor(pred_dnn,levels = c(0, 1),labels = c("0","1")), 
  data_test$diagnosis,
  positive = "1")   
print(confusion_matrix_dnn) 


# 获取指标
metrics_dnn <- data.frame(
  Accuracy = confusion_matrix_dnn$overall["Accuracy"],
  Precision = confusion_matrix_dnn$byClass["Precision"],
  Recall = confusion_matrix_dnn$byClass["Recall"],
  F1 = confusion_matrix_dnn$byClass["F1"],
  AUC =  pROC::auc(response = data_test$diagnosis, predictor = prob_dnn)
)
metrics_dnn

# 转置为垂直格式
final_metrics_dnn <- metrics_dnn %>% 
  t() %>%
  as.data.frame() %>%
  tibble::rownames_to_column("Metric") %>%
  rename(Value = "Accuracy")
final_metrics_dnn
# 保存结果
write.csv(final_metrics_dnn, "dnn_metrics.csv", row.names = FALSE)


# 将混淆矩阵转换为数据框
conf_matrix_df_dnn <- as.data.frame(confusion_matrix_dnn$table)


# 使用ggplot2绘制混淆矩阵热图
conf_plot_dnn <- ggplot(conf_matrix_df_dnn, aes(x =Reference, y = Prediction, fill = Freq)) +
  geom_tile(color = "white") +
  geom_text(aes(label = Freq), color = "black", size = 6) +
  scale_fill_gradient(low = "white", high = "#1E90FF") +  # 使用更鲜艳的颜色
  labs(
    title = "Confusion Matrix for Deep Neural Networks",
    x = "Actual Class",
    y = "Predicted Class",
    fill = "Frequency"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5, size = 20, face = "bold", color = "darkblue"),
    axis.title = element_text(size = 14, face = "bold"),
    axis.text = element_text(size = 12, color = "black"),
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    plot.caption = element_text(size = 12, hjust = 0.5, face = "italic", color = "darkred"),
    plot.background = element_rect(fill = "grey95"),  # 设置背景颜色
    panel.background = element_rect(fill = "white")  # 设置面板背景颜色
  )
conf_plot_dnn

ggsave("./混淆矩阵_dnn.pdf", conf_plot_dnn, width = 6, height = 6)

save.image('DNN.RData')
library(PRROC)
library(ROCR)
roc_dnn <- pROC::roc(response = data_test$diagnosis, predictor = prob_dnn)
auc_dnn <- roc_dnn$auc
nn.fit
saveRDS(nn.fit, file = "dnn_model.rds")
save.image('DNN最后结果.RData')


